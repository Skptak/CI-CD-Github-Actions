name: 'rust-spell-check'
description: 'Rust CI spellings check'
inputs:
  path:
    description: 'Path to repository folder to check spellings in.'
    required: false
    default: ./
  lexicon:
    description: 'Path to lexicon file to check spellings with'
    required: false
    default: lexicon.txt
  exclude-dirs:
    description: "Comma separated list of directories to not spell check"
    required: false
  exclude-files:
    description: "Comma separated list of files to not spell check"
    required: false
  include-extensions:
    description: "Comma separated list of files to match to regex"
    required: false


runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
    - env:
        bashPass: \033[32;1mPASSED -
        bashInfo: \033[33;1mINFO -
        bashFail: \033[31;1mFAILED -
        bashEnd: \033[0m
        stepName: Install aspell
      name: ${{ env.stepName }}
      shell: bash
      run: |
        # ${{ env.stepName }}
        echo "::group::${{ env.stepName }}"
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
        sudo apt-get install aspell libaspell-dev util-linux
        exitStatus=$?
        echo "::endgroup::"
        if [ $exitStatus -eq 0 ]; then
          echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"
        else
          echo -e "${{ env.bashFail }} ${{ env.stepName }} ${{ env.bashEnd }}"
          exit 1
        fi       
    
    - name: Install rust toolchain
      uses: actions-rs/toolchain@v1
      with:
          toolchain: nightly
          override: true
          components: rustfmt, clippy

    - env:
        stepName: Compile Spell checker
      name: ${{ env.stepName }}
      id: compile-spell-chcker
      working-directory: .
      shell: bash
      run: | 
        # ${{ env.stepName }}
        echo "::group::${{ env.stepName }}"
        echo "/home/runner/.cargo/bin" >> $GITHUB_PATH
        cargo --version
        cargo build --release
        target/release/spell-checker --help
        exitStatus=$?
          echo "::endgroup::"
          if [ $exitStatus -eq 0 ]; then
            echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"
          else
            echo -e "${{ env.bashFail }} ${{ env.stepName }} ${{ env.bashEnd }}"
            exit 1
          fi       

    - env:
        stepName: Run Spell Checker
      name: ${{ env.stepName }}
      id: run-spell-checker
      working-directory: ${{ inputs.path }}
      shell: bash
      run: |
        # ${{ env.stepName }}
        echo "::group::${{ env.stepName }}"
        
        getFiles --exclude-dirs="${{ inputs.exclude-dirs}}" --exclude-files="${{ inputs.exclude-files }}" --include-extensions="${{ inputs.include-extensions }}
        spell-checker -c -w ${{ inputs.lexicon}}
        exitStatus=$?

        echo "::endgroup::"
        if [ $exitStatus -eq 0 ]; then
          echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"
        else
          echo -e "${{ env.bashFail }} ${{ env.stepName }} ${{ env.bashEnd }}"
          exit 1
        fi       
      

