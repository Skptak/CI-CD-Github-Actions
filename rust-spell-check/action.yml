name: 'rust-spell-check'
description: 'Rust CI spellings check'
inputs:
  path:
    description: 'Path to repository folder to check spellings in.'
    required: false
    default: ./
  lexicon:
    description: 'Path to lexicon file to check spellings with'
    required: false
    default: lexicon.txt
  exclude-dirs:
    description: "Comma separated list of directories to not spell check"
    required: false
  exclude-files:
    description: "Comma separated list of files to not spell check"
    required: false
  include-extensions:
    description: "Comma separated list of files to match to regex"
    required: false


runs:
  using: "composite"
  steps:
    - env:
        bashPass: \033[32;1mPASSED -
        bashInfo: \033[33;1mINFO -
        bashFail: \033[31;1mFAILED -
        bashEnd:  \033[0m
        stepName: Install Dependencies
      name: ${{ env.stepName }}
      id: spell-checker-setup
      shell: bash
      continue-on-error: true
      working-directory: rust-spell-check
      run: |
        # ${{ env.stepName }}
        echo "::group::${{ env.stepName }}"

        # Install the Dependencies we need to run the spell-checker
        sudo apt-get install util-linux -y
        sudo apt-get install fd-find -y
        sudo apt-get install aspell -y

        # Check if we can use the current spell checker
        echo -e " ${{ env.bashInfo }} Check for pre-build spell checker ${{ env.bashEnd }}"
        set +e
        spell-checker
        exitCode=$?
        set -e
        if ! [ $exitCode -eq 0 ]; then
          # If we can't run the current one, install the tools we need to build it
          # This needs the -y flag on the sh. So need to put in a file to run it
          echo -e " ${{ env.bashInfo }} Don't have the ability to use it, building it ${{ env.bashEnd }}"
          sudo curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > install.sh
          chmod 777 install.sh
          ./install.sh -y

          # I Split these up into multiple commands so if one errors
          # You can easily see which one causes it
          sudo apt-get install spell -y
          sudo apt-get install libaspell-dev -y
        fi
        echo "::endgroup::"
        # Only get to here if nothing above fails
        echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"

    - name: Install rust toolchain
      id: install-rust-toolchain
      if: steps.spell-checker-setup.outcome == 'failure'
      uses: actions-rs/toolchain@v1
      with:
          toolchain: nightly
          override: true
          components: rustfmt, clippy

    - env:
        stepName: Compile Spell checker
      name: ${{ env.stepName }}
      id: compile-spell-checker
      if: steps.spell-checker-setup.outcome == 'failure'
      shell: bash
      working-directory: rust-spell-check
      run: |
        # ${{ env.stepName }}
        echo "::group::${{ env.stepName }}"
        echo "/home/runner/.cargo/bin" >> $GITHUB_PATH
        cargo --version
        cargo build --release
        mv target/release/spell-checker .
        echo "$(pwd)" >> $GITHUB_PATH
        spell-checker --help
        exitStatus=$?
          echo "::endgroup::"
          if [ $exitStatus -eq 0 ]; then
            echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"
          else
            echo -e "${{ env.bashFail }} ${{ env.stepName }} ${{ env.bashEnd }}"
            exit 1
          fi

    - env:
        stepName: Run Spell Checker
      name: ${{ env.stepName }}
      id: run-spell-checker
      working-directory: ${{ inputs.path }}
      shell: bash
      run: |
        # ${{ env.stepName }}
        echo "::group::${{ env.stepName }}"
        echo "$GITHUB_ACTION_PATH" >> $GITHUB_PATH
        export PATH="$PATH:$GITHUB_ACTION_PATH"

        files=$(getFiles --exclude-dirs="${{ inputs.exclude-dirs}}" --exclude-files="${{ inputs.exclude-files }}" --include-extensions="${{ inputs.include-extensions }}")
        spell-checker -c -w .cSpellWords.txt $files
        exitStatus=$?

        echo "::endgroup::"
        if [ $exitStatus -eq 0 ]; then
          echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"
        else
          echo -e "${{ env.bashFail }} ${{ env.stepName }} ${{ env.bashEnd }}"
          exit 1
        fi
