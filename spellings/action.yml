name: 'spellings'
description: 'CI spellings check'
inputs:
  path:
    description: 'Path to repository folder to run formatting check for.'
    required: false
    default: ./
  exclude-files:
    description: 'List of comma-separated files to exclude from trailing whitespace check. Eg file1,file2'
    required: false
    default: ''
  exclude-dirs:
    description: 'List of comma-separated directories to exclude from trailing whitespace formatting check. Eg docs,build'
    required: false
    default: ''
runs:
  using: "composite"
  steps:
      - env:
          stepName: Install Spell
        name: ${{ env.stepName }}
        run: |
          #  ${{ env.stepName }}
          echo "::group::${{ env.stepName }}"
          sudo apt-get install spell
          sudo apt-get install util-linux
          sudo apt-get install npm
          npm install -g cspell
          echo "::endgroup::"
        shell: bash
      - env:
          bashPass:   \033[32;1mPASSED -
          bashInfo:   \033[33;1mINFO -
          bashFail:   \033[31;1mFAILED -
          bashEnd:    \033[0m
          stepName: Check Spelling
        name: ${{ env.stepName}}
        shell: bash
        working-directory: ${{ inputs.path }}
        run: |
          #  ${{ env.stepName }}
          echo "::group::${{ env.stepName }}"
          set +e
          pwd
          files=($(grep --include={*.[ch],} --exclude={${{inputs.exclude-files}},} --exclude-dir={${{inputs.exclude-dirs}},} -lriE "copyright (.*) [0-9]{4} amazon.com" ))
          for file in ${files[@]}; do
            echo -e "${{ env.bashInfo }} Checking Spelling of: "$file" ${{ env.bashEnd }}"
            # Call cspell with the C language option. 
            # Enable colour output
            # Use the config file from the CI-CD Github action
            # Use current directory as root
            # Check Spelling of words in file
            cspell --language-id C --unique --color -c $GITHUB_ACTION_PATH/cspell.json --root . $file
            cspell --language-id C --unique --words-only $files >> $GITHUB_ACTION_PATH/shared-dict.txt
          done
          exitStatus=$?
          cd $GITHUB_ACTION_PATH/
          pwd
          ls
          cd $GITHUB_ACTION_PATH
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "<>
          git add shared-dict.txt
          git commit -m "Updating shared-dict.txt"
          git push origin main
          set -e
          echo "::endgroup::"
          if [ "$exitStatus" = "0" ]; then
            echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"
          else
            echo -e "${{ env.bashFail }} ${{ env.stepName }} ${{ env.bashEnd }}"
            exit 1
          fi

