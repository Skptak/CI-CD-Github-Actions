name: 'spellings'
description: 'CI spellings check'
inputs:
  path:
    description: 'Path to repository folder to run formatting check for.'
    required: false
    default: ./
  exclude-files:
    description: 'List of comma-separated files to exclude from trailing whitespace check. Eg file1,file2'
    required: false
    default: ''
  exclude-dirs:
    description: 'List of comma-separated directories to exclude from trailing whitespace formatting check. Eg docs,build'
    required: false
    default: ''
  include-extensions:
    description: 'List of comma-separated file endings to include into the spell check. Eg md, dox, build'
    required: false
    default: ''

runs:
  using: "composite"
  steps:
      - env:
          stepName: Install Spell
          bashPass:   \033[32;1mPASSED -
          bashInfo:   \033[33;1mINFO -
          bashFail:   \033[31;1mFAILED -
          bashEnd:    \033[0m
        name: ${{ env.stepName }}
        shell: bash
        run: |
          #  ${{ env.stepName }}
          echo "::group::${{ env.stepName }}"
          sudo apt-get install spell
          sudo apt-get install util-linux
          sudo apt-get install npm fd-find
          sudo npm install -g cspell
          echo "$GITHUB_ACTION_PATH" >> $GITHUB_PATH
          export PATH="$PATH:$GITHUB_ACTION_PATH"
          pwd
          ls -al
          which getFiles
          cspell --version
          exitStatus=$?
          echo "::endgroup::"
          if [ $exitStatus -eq 0 ]; then
            echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"
          else
            echo -e "${{ env.bashFail }} ${{ env.stepName }} ${{ env.bashEnd }}"
            exit 1
          fi

      - env:
          stepName: Check Spelling
        name: ${{ env.stepName}}
        shell: bash
        working-directory: ${{ inputs.path }}
        run: |
          #  ${{ env.stepName }}
          echo "::group::${{ env.stepName }}"
          export PATH="$PATH:$GITHUB_ACTION_PATH"
          files=$(getFiles --exclude-dirs="${{ inputs.exclude-dirs }}" --exclude-files="${{ inputs.exclude-files }}" --include-extensions="${{ inputs.include-extensions}}")
          set +e
          cspell --language-id C --color -c cspell.config.yaml --show-suggestions --show-context --file-list "$file"
          exitStatus=$?
          set -e
          echo "::endgroup::"
          if [ $exitStatus -eq 0 ]; then
            echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"
          else
            echo -e "${{ env.bashFail }} ${{ env.stepName }} ${{ env.bashEnd }}"
            exit 1
          fi

